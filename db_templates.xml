<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_forward_servlet">&#13;
import java.io.IOException;&#13;
&#13;
import javax.servlet.RequestDispatcher;&#13;
import javax.servlet.ServletException;&#13;
import javax.servlet.annotation.WebServlet;&#13;
import javax.servlet.http.HttpServlet;&#13;
import javax.servlet.http.HttpServletRequest;&#13;
import javax.servlet.http.HttpServletResponse;&#13;
&#13;
/**&#13;
 * Servlet implementation class ${ primary_type_name }&#13;
 */&#13;
@WebServlet("/${ cursor }")&#13;
public class ${ primary_type_name } extends HttpServlet {&#13;
	private static final long serialVersionUID = 1L;&#13;
&#13;
	/**&#13;
	 * @see HttpServlet#service(HttpServletRequest request, HttpServletResponse response)&#13;
	 */&#13;
	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&#13;
		// TODO Auto-generated method stub&#13;
		&#13;
		&#13;
		//request binding&#13;
		&#13;
		&#13;
		//forward&#13;
		String forward_page = "";&#13;
		RequestDispatcher disp = request.getRequestDispatcher(forward_page);&#13;
		disp.forward(request, response);&#13;
	}&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_insert_update_delete">	public int insert_update_delete(${argType} vo) {&#13;
		&#13;
		Connection 		  conn = null;	//연결관리객체&#13;
		PreparedStatement pstmt = null;	//명령처리객체&#13;
		int res = 0;					//insert에 대한 처리결과(처리된 행수)&#13;
		&#13;
		String sql = "";&#13;
		&#13;
		try {&#13;
			//1.Connection 얻어오기&#13;
			conn = DBService.getInstance().getConnection();&#13;
			//2.PreparedStatement 얻어오기(명령처리객체)&#13;
			pstmt = conn.prepareStatement(sql);&#13;
			//3.pstmt parameter index 채워준다&#13;
			&#13;
&#13;
			&#13;
			//4.DB에 처리(insert/update/delete)&#13;
			res = pstmt.executeUpdate();	//select 외의 모든 명령은 executeUpdate (select: executeQuery)&#13;
			&#13;
		} catch (Exception e) {&#13;
			e.printStackTrace();&#13;
		} finally {&#13;
			&#13;
			try {&#13;
				//닫기(열린역순)&#13;
				if(pstmt != null) pstmt.close(); //2&#13;
				if(conn != null) conn.close();	 //1&#13;
			} catch (SQLException e) {&#13;
				e.printStackTrace();&#13;
			}&#13;
		}&#13;
		&#13;
		return res;&#13;
	}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_select_list">	public List&lt;${argType}&gt; selectList() {&#13;
&#13;
		Connection 		  conn = null;	//연결관리 객체&#13;
		PreparedStatement pstmt = null;	//SQL 명령처리 객체&#13;
		ResultSet		  rs	= null;	//결과행 처리 객체&#13;
		&#13;
		List&lt;${argType}&gt; list = new ArrayList&lt;${argType}&gt;();&#13;
		String		 sql  = "select * from		";&#13;
		&#13;
		try {&#13;
			//1.Connection 얻어오기&#13;
			conn = DBService.getInstance().getConnection();	//연결하면 닫는 작업부터 미리 해놓자&#13;
			&#13;
			//2.명령처리 객체 얻어오기&#13;
			pstmt = conn.prepareStatement(sql); //연결하면 닫는 작업부터 미리 해놓자&#13;
			&#13;
			//3.결과행 처리 객체 얻어오기&#13;
			rs = pstmt.executeQuery();	//연결하면 닫는 작업부터 미리 해놓자&#13;
			&#13;
			while(rs.next())&#13;
			{&#13;
				//현재 rs의 위치 : 데이터영역 어딘가&#13;
				//rs가 가리키는 레코드 내의 필드값을 얻어와서 VO에 포장&#13;
				${argType} vo = new ${argType}();&#13;
			&#13;
				&#13;
				&#13;
				//ArrayList에 추가&#13;
				list.add(vo);&#13;
			}&#13;
			&#13;
		} catch (Exception e) {&#13;
			e.printStackTrace();&#13;
			&#13;
		} finally {	 //try든 catch든 무조건 실행되는 부분&#13;
			&#13;
			try {&#13;
				&#13;
				//닫기(열린 역순)&#13;
				//연결되어있으면 닫아라&#13;
				if(rs!=null) rs.close();&#13;
				if(pstmt!=null) pstmt.close();&#13;
				if(conn!=null) conn.close();&#13;
				&#13;
			} catch (SQLException e) {&#13;
				e.printStackTrace();&#13;
			}&#13;
			&#13;
		} //end-finally&#13;
		&#13;
		return list;&#13;
	}&#13;
	</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_select_one">//idx에 해당되는 데이터 1건 조회&#13;
	public ${argType} selectOne(int idx) {&#13;
		&#13;
		Connection        conn  = null; //연결관리객체&#13;
		PreparedStatement pstmt = null; //SQL명령처리객체 &#13;
		ResultSet         rs    = null; //결과행처리객체&#13;
		&#13;
		//조회결과를 담을 객체&#13;
		${argType} vo  = null;&#13;
		//												  1 &lt;= parameter index&#13;
		String sql = "select * from  ";&#13;
		&#13;
		try {&#13;
			//1.Connection 얻어오기&#13;
			conn = DBService.getInstance().getConnection();&#13;
			&#13;
			//2.명령처리객체 얻어오기&#13;
			pstmt = conn.prepareStatement(sql);&#13;
			&#13;
			//3.pstmt parameter 설정&#13;
			&#13;
			&#13;
			//4.결과행처리객체 얻어오기&#13;
			rs = pstmt.executeQuery();&#13;
			&#13;
			if(rs.next()) //한번만 돌리면 끝나기 때문에 while 대신 if&#13;
			{&#13;
			    //현재 rs의 위치 : 데이터영역 어딘가?	&#13;
			    //rs가 가리키는 레코드내의 필드값을 얻어와서 VO포장	&#13;
				vo = new ${argType}(); &#13;
				&#13;
				vo.setIdx( rs.getInt("idx") );&#13;
				&#13;
&#13;
			}&#13;
			&#13;
		} catch (Exception e) {&#13;
			// TODO: handle exception&#13;
			e.printStackTrace();&#13;
		} finally {&#13;
			&#13;
			try {&#13;
				&#13;
				//닫기:열린역순으로...&#13;
				//열려있으면 닫아라(3)&#13;
				if(rs!=null) rs.close();&#13;
				&#13;
				//열려있으면 닫아라(2)&#13;
				if(pstmt!=null) pstmt.close();&#13;
				&#13;
				//연결되어있으면 닫아라(1)&#13;
				if(conn!=null) conn.close();&#13;
				&#13;
			} catch (SQLException e) {&#13;
				// TODO Auto-generated catch block&#13;
				e.printStackTrace();&#13;
			}&#13;
			&#13;
		}//end finally&#13;
		&#13;
		&#13;
		return vo;&#13;
	}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_singleton">	//singleton : 객체를 1개만 생성해서 그 객체가 지속적으로 서비스 수행&#13;
	static ${primary_type_name} single = null;&#13;
	&#13;
	public static ${primary_type_name} getInstance() {&#13;
		&#13;
		if(single==null) single = new ${primary_type_name}();&#13;
		&#13;
		return single;&#13;
	}&#13;
	&#13;
	//private 생성자 : 외부에서 직접 생성하지 말 것 : new ${primary_type_name}() (X)&#13;
	private ${primary_type_name}() {&#13;
		// TODO Auto-generated constructor stub&#13;
	}&#13;
	</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_win">&#13;
import javax.swing.JFrame;&#13;
&#13;
//AWT(Abstract Window Toolkit) : 윈도우 기능을 구현해놓은 클래스 (현업에서는 잘 안씀)&#13;
//  └ Swing : AWT를 좀 더 UI 또는 기능적으로 향상시킨 윈도우 클래스&#13;
&#13;
public class ${primary_type_name} extends JFrame{&#13;
	&#13;
	//생성자의 기능 : 초기화&#13;
	public ${primary_type_name}() {		&#13;
		&#13;
		//제목 지정&#13;
		super("윈도우");&#13;
		&#13;
		//위치 지정			x    y&#13;
		super.setLocation(1500, 200);&#13;
		&#13;
		//크기 지정       W    H&#13;
		super.setSize(400, 300);&#13;
				&#13;
		//보여주기&#13;
		super.setVisible(true);&#13;
	&#13;
		//종료기능 구현&#13;
		super.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#13;
	&#13;
	}//end 초기화&#13;
	&#13;
&#13;
	public static void main(String[] args) {&#13;
		&#13;
		new ${primary_type_name}();&#13;
	}&#13;
&#13;
}&#13;
</template></templates>